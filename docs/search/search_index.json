{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Martin's Tech Blog","text":"<p>Here I'll write about my studies of new technologies.</p>"},{"location":"posts/fetching-data-in-react/","title":"Fetching data in React","text":"<p>I've been developing in React for quite some time now. Usually when I needed to fetch some data, it was fine to create a <code>useEffect</code> hook, fetch it and then set it into a state using the useState hook. However, recently I've been wondering if there is a cleaner way, including error handling and retries. And of counrse there is. There is actually several. Here I'll try to learn more about the possibilities of data fetching in React</p>"},{"location":"posts/fetching-data-in-react/#the-example-app","title":"The example app","text":"<p>I'll be trying the methods on an example todo app I prepared. The app looks something like this:</p> <p></p> <p>The implementation is very trivial. It looks something like this:</p> <p>```typescript jsx function App() {   const [todos, setTodos] = useState([])   const [newTodo, setNewTodo] = useState(\"\") <p>const [isAppLoading, setAppLoading] = useState(false)   const [isNewLoading, setNewLoading] = useState(false)   const [isRemoveLoading, setRemoveLoading] = useState(false)   const [isRemoveAllLoading, setRemoveAllLoading] = useState(false)</p> <p>const removedTodo = useRef(null) <p>function resetInput() {     setNewTodo('')   }</p> <p>async function fetchTodos() {     setTodos(await getTodos())   }</p> <p>useEffect(() =&gt; {     (async () =&gt; {       setAppLoading(true)</p> <pre><code>  await fetchTodos()\n\n  setAppLoading(false)\n})()\n</code></pre> <p>}, [])</p> <p>async function submitAddTodo() {     setNewLoading(true)</p> <pre><code>await addTodo({ id: null, content: newTodo })\nawait fetchTodos()\n\nsetNewLoading(false)\nresetInput()\n</code></pre> <p>}</p> <p>async function submitDeleteTodo(todo: Todo) {     setRemoveLoading(true)     removedTodo.current = todo.id</p> <pre><code>await deleteTodo(todo)\nawait fetchTodos()\n\nsetRemoveLoading(false)\nremovedTodo.current = null\nresetInput()\n</code></pre> <p>}</p> <p>async function submitDeleteAllTodos() {     setRemoveAllLoading(true)</p> <pre><code>await deleteAllTodos()\nawait fetchTodos()\n\nsetRemoveAllLoading(false)\nresetInput()\n</code></pre> <p>}</p> <p>if (isAppLoading) {     return    }</p> <p>return (     &lt;&gt;...   ) }</p> <pre><code>\nI omitted the JSX markup as that's not the point of today's exercise.\n\nI tried to handle all the waiting for API responses in a nice UX-friendly way, but I guess you'll be the judge of that. Although that made a bit of a mess in the component's state.\n\nThe todo service functions look something like this:\n\n```typescript\nexport interface Todo {\n  id: string | null;\n  content: string;\n}\n\nconst BASE_URL = import.meta.env.DEV\n  ? 'http://localhost:8080'\n  : '/'\nconst TODO_URL = `${BASE_URL}/api/todos`\n\nexport async function getTodos(): Promise&lt;Todo[]&gt; {\n  const data = await fetchAPI(TODO_URL)\n  return await data.json()\n}\n\nexport async function addTodo(newTodo: Todo): Promise&lt;Response&gt; {\n  return fetchAPI(TODO_URL, 'POST', JSON.stringify(newTodo))\n}\n\nexport function deleteTodo(todo: Todo): Promise&lt;Response&gt; {\n  return fetchAPI(TODO_URL, 'DELETE', JSON.stringify(todo))\n}\n\nexport function deleteAllTodos(): Promise&lt;Response&gt; {\n  return fetchAPI(`${TODO_URL}/all`, 'DELETE')\n}\n\ntype HttpMethod = 'GET' | 'POST' | 'PUT' | 'DELETE'\n\nasync function fetchAPI(url: string, method: HttpMethod = 'GET', body?: string): Promise&lt;Response&gt; {\n  return fetch(url, {\n    method,\n    headers: {\n      ...(method !== 'GET' &amp;&amp; { 'Content-Type': 'application/json' })\n    },\n    body\n  })\n}\n\n</code></pre> <p>It's not avery clean or a robust solution, but for the sake of this exercise, I tried to avoid too much duplication even while using the built-in fetch API. Also, the error handling and retrying of requests is completely missing. Now we'll try to improve upon this with the React Query library.</p>"},{"location":"posts/fetching-data-in-react/#react-query","title":"React Query","text":"<p>WIP</p>"},{"location":"posts/styled-components-with-react/","title":"Learning Styled Components with React","text":"<p>I've never been a big fan of tinkering with CSS. It was always a struggle to try to achieve a pixel-perfect design of the app, and the process wasn't satisfying at all. In the backend, it always felt more satisfying to improve the existing architecture, or fix some issues in the logic. If I fixed some styling issues on the frontend, usually it led to an even more complicated CSS file. But that's probably mostly from lack of experience with it.</p> <p>But today I'll try to  rewrite the basic Todo app's CSS into a cleaner Styled Components solution, while preserving the current design.</p>"},{"location":"posts/styled-components-with-react/#the-example-app","title":"The example app","text":"<p>I'll be trying Styled Components with an example Todo app I prepared. The app looks something like this:</p> <p></p> <p>My main goal is to not break the app when trying to fit in the Styled Components.</p>"}]}